"use client";

import { useState } from "react";
import { QrCodeBatch } from "@/lib/db/schema";
import jsPDF from "jspdf";
import QRCode from "qrcode";

interface QRHistoryTableProps {
  batches: (QrCodeBatch & { used: number; unused: number })[];
}

export default function QRHistoryTable({ batches }: QRHistoryTableProps) {
  const [loading, setLoading] = useState(false);
  const [downloadingBatchId, setDownloadingBatchId] = useState<number | null>(
    null
  );

  const handleDownload = async (batchId: number, quantity: number) => {
    setLoading(true);
    setDownloadingBatchId(batchId);

    try {
      // Fetch QR codes for this batch
      const response = await fetch(`/api/qr/batches/${batchId}`);
      const data = await response.json();

      if (!data.success) {
        alert("Failed to fetch QR codes");
        return;
      }

      const qrCodes = data.qrCodes;

      // Generate PDF
      const doc = new jsPDF();
      const pageWidth = 210; // A4 width in mm
      const pageHeight = 297; // A4 height in mm
      const margin = 15;
      const qrSize = 40;
      const gap = 10;
      const perRow = 4;
      const perCol = 6;
      const perPage = perRow * perCol;

      let currentPage = 0;
      let position = 0;

      for (const code of qrCodes) {
        if (position >= perPage) {
          doc.addPage();
          currentPage++;
          position = 0;
        }

        const row = Math.floor(position / perRow);
        const col = position % perRow;
        const x = margin + col * (qrSize + gap);
        const y = margin + row * (qrSize + gap + 15);

        // Generate QR code
        const qrDataUrl = await QRCode.toDataURL(
          `${window.location.origin}/scan/${code.qrCodeId}`,
          { width: 200 }
        );

        // Add QR code image
        doc.addImage(qrDataUrl, "PNG", x, y, qrSize, qrSize);

        // Add ID below QR code
        doc.setFontSize(8);
        doc.text(code.qrCodeId.substring(0, 13), x, y + qrSize + 4, {
          maxWidth: qrSize,
        });
        doc.text("...", x, y + qrSize + 8, { maxWidth: qrSize });

        position++;
      }

      // Add header on first page
      doc.setPage(1);
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.text("Pet Passport QR Codes", pageWidth / 2, 10, { align: "center" });

      // Save PDF
      const batch = batches.find((b) => b.id === batchId);
      const date = batch
        ? new Date(batch.generatedAt).toISOString().split("T")[0]
        : "unknown";
      doc.save(`QR_Codes_Batch_${batchId}_${date}.pdf`);
    } catch (error) {
      console.error("Error downloading QR codes:", error);
      alert("Failed to download QR codes");
    } finally {
      setLoading(false);
      setDownloadingBatchId(null);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50 border-b border-gray-200">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Batch ID
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date & Time
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Generated By
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Quantity
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {batches.length === 0 ? (
              <tr>
                <td colSpan={6} className="px-6 py-8 text-center text-gray-500">
                  No QR code batches found. Generate your first batch to get
                  started.
                </td>
              </tr>
            ) : (
              batches.map((batch) => (
                <tr key={batch.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-mono font-semibold text-gray-900">
                      #{batch.id}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {new Date(batch.generatedAt).toLocaleString()}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {batch.generatedByName}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-semibold text-gray-900">
                      {batch.quantity} QR codes
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-xs space-y-1">
                      <div className="flex items-center gap-2">
                        <span className="inline-flex items-center px-2 py-0.5 rounded-full bg-green-100 text-green-800 font-medium">
                          {batch.used} used
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="inline-flex items-center px-2 py-0.5 rounded-full bg-gray-100 text-gray-800 font-medium">
                          {batch.unused} unused
                        </span>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <button
                      onClick={() => handleDownload(batch.id, batch.quantity)}
                      disabled={loading}
                      className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {downloadingBatchId === batch.id ? (
                        <>
                          <svg
                            className="animate-spin h-4 w-4"
                            fill="none"
                            viewBox="0 0 24 24"
                          >
                            <circle
                              className="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              strokeWidth="4"
                            ></circle>
                            <path
                              className="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                          </svg>
                          Downloading...
                        </>
                      ) : (
                        <>
                          <svg
                            className="w-4 h-4"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                            />
                          </svg>
                          Download PDF
                        </>
                      )}
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
